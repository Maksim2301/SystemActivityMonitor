package com.example.systemactivitymonitor.controller;

import com.example.systemactivitymonitor.model.Report;
import com.example.systemactivitymonitor.model.User;
import com.example.systemactivitymonitor.service.ReportService;
import com.example.systemactivitymonitor.util.Session;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;

public class ReportsController {

    @FXML private TextField reportNameField;
    @FXML private DatePicker startDatePicker;
    @FXML private DatePicker endDatePicker;
    @FXML private Label messageLabel;
    @FXML private ListView<Report> reportsList;
    @FXML private Label avgCpuLabel;
    @FXML private Label avgRamLabel;
    @FXML private Label uptimeAvgLabel;
    @FXML private ListView<String> appUsageList;

    private final ReportService reportService = new ReportService();

    @FXML
    public void initialize() {
        // ‚úÖ –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ–ø–∏—Å—É –∑–≤—ñ—Ç—É (–±–µ–∑ CPU –ø–æ –≥–æ–¥–∏–Ω–∞—Ö)
        reportsList.setCellFactory(listView -> new ListCell<>() {
            @Override
            protected void updateItem(Report report, boolean empty) {
                super.updateItem(report, empty);
                if (empty || report == null) {
                    setText(null);
                } else {
                    String uptime = report.getFilePath() != null && report.getFilePath().contains("–°–µ—Ä–µ–¥–Ω—ñ–π –∞–ø—Ç–∞–π–º:")
                            ? report.getFilePath().split("–°–µ—Ä–µ–¥–Ω—ñ–π –∞–ø—Ç–∞–π–º:")[1].trim()
                            : "‚Äî";

                    setText(String.format(
                            "%s\n%s ‚Üí %s\n‚öô CPU: %s%% | üíæ RAM: %s MB\n%s",
                            report.getReportName(),
                            report.getPeriodStart(),
                            report.getPeriodEnd(),
                            report.getCpuAvg(),
                            report.getRamAvg(),
                            uptime
                    ));
                }
            }
        });
        reportsList.setPlaceholder(new Label("–ó–≤—ñ—Ç—ñ–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—î."));
    }

    @FXML
    private void generateReport() {
        User user = Session.getCurrentUser();
        if (user == null) {
            messageLabel.setText("–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å —É —Å–∏—Å—Ç–µ–º—É!");
            return;
        }

        LocalDate start = startDatePicker.getValue();
        LocalDate end = endDatePicker.getValue();
        if (start == null || end == null) {
            messageLabel.setText("–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç–∏.");
            return;
        }

        try {
            Report report = reportService.generateReport(user, reportNameField.getText(), start, end);
            List<Report> reports = reportService.getReportsByUser(user);
            reportsList.getItems().setAll(reports);
            displayReportDetails(report);

            messageLabel.setText("‚úÖ –ó–≤—ñ—Ç \"" + report.getReportName() + "\" —Å—Ç–≤–æ—Ä–µ–Ω–æ.");
        } catch (Exception e) {
            messageLabel.setText("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–≤—ñ—Ç—É: " + e.getMessage());
        }
    }

    @FXML
    private void showReports() {
        User user = Session.getCurrentUser();
        if (user == null) {
            messageLabel.setText("–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å —É —Å–∏—Å—Ç–µ–º—É!");
            return;
        }

        try {
            List<Report> reports = reportService.getReportsByUser(user);
            reportsList.getItems().setAll(reports);

            if (!reports.isEmpty()) {
                displayReportDetails(reports.get(reports.size() - 1));
            }

            messageLabel.setText("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ " + reports.size() + " –∑–≤—ñ—Ç(—ñ–≤).");
        } catch (Exception e) {
            messageLabel.setText("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–≤—ñ—Ç—ñ–≤: " + e.getMessage());
        }
    }

    @FXML
    private void filterReportsByDate() {
        User user = Session.getCurrentUser();
        if (user == null) {
            messageLabel.setText("–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å —É —Å–∏—Å—Ç–µ–º—É!");
            return;
        }

        LocalDate start = startDatePicker.getValue();
        LocalDate end = endDatePicker.getValue();

        if (start == null || end == null) {
            messageLabel.setText("–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç–∏ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.");
            return;
        }

        try {
            List<Report> filteredReports = reportService.getReportsInPeriod(user, start, end);
            reportsList.getItems().setAll(filteredReports);

            if (!filteredReports.isEmpty()) {
                displayReportDetails(filteredReports.get(filteredReports.size() - 1));
            }

            messageLabel.setText("–í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∑–≤—ñ—Ç–∏ –∑–∞ –ø–µ—Ä—ñ–æ–¥: " + start + " ‚Üí " + end);
        } catch (Exception e) {
            messageLabel.setText("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: " + e.getMessage());
        }
    }

    /** üßæ –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É (—á–µ—Ä–µ–∑ —ñ—Ç–µ—Ä–∞—Ç–æ—Ä) */
    @FXML
    private void showDetailedStats() {
        User user = Session.getCurrentUser();
        if (user == null) {
            messageLabel.setText("–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å —É —Å–∏—Å—Ç–µ–º—É!");
            return;
        }

        Report selected = reportsList.getSelectionModel().getSelectedItem();
        if (selected == null) {
            messageLabel.setText("‚ö†Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –∑–≤—ñ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
            return;
        }

        try {
            String details = reportService.getCpuAndRamReport(user, selected); // ‚¨Ö –ø–µ—Ä–µ–¥–∞—î–º–æ user
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
            alert.setHeaderText("üìä " + selected.getReportName());
            alert.setContentText(details);
            alert.getDialogPane().setPrefWidth(450);
            alert.getDialogPane().setPrefHeight(400);
            alert.showAndWait();
        } catch (Exception e) {
            messageLabel.setText("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: " + e.getMessage());
        }
    }

    @FXML
    private void deleteSelectedReport() {
        Report selected = reportsList.getSelectionModel().getSelectedItem();
        if (selected == null) {
            messageLabel.setText("‚ö†Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –∑–≤—ñ—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.");
            return;
        }

        try {
            reportService.deleteReport(selected.getId());
            reportsList.getItems().remove(selected);
            appUsageList.getItems().clear();
            messageLabel.setText("üóë –ó–≤—ñ—Ç \"" + selected.getReportName() + "\" –≤–∏–¥–∞–ª–µ–Ω–æ.");
        } catch (Exception e) {
            messageLabel.setText("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–≤—ñ—Ç—É: " + e.getMessage());
        }
    }

    private void displayReportDetails(Report report) {
        avgCpuLabel.setText(String.format("‚öô CPU: %.2f%%", report.getCpuAvg()));
        avgRamLabel.setText(String.format("üíæ RAM: %.2f MB", report.getRamAvg()));
        uptimeAvgLabel.setText(report.getFilePath() != null && report.getFilePath().contains("–°–µ—Ä–µ–¥–Ω—ñ–π –∞–ø—Ç–∞–π–º:")
                ? report.getFilePath().split("–°–µ—Ä–µ–¥–Ω—ñ–π –∞–ø—Ç–∞–π–º:")[1].trim()
                : "‚Äî");

        appUsageList.getItems().clear();
        Map<String, BigDecimal> appUsage = report.getAppUsagePercent();
        if (appUsage != null && !appUsage.isEmpty()) {
            appUsageList.getItems().addAll(appUsage.entrySet().stream()
                    .map(e -> String.format("%s ‚Üí %.2f %%", e.getKey(), e.getValue()))
                    .toList());
        } else {
            appUsageList.getItems().add("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º.");
        }
    }

    @FXML
    private void goBack() {
        switchScene("/fxml/main.fxml", "Main Menu");
    }

    private void switchScene(String fxml, String title) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxml));
            Scene scene = new Scene(loader.load());
            Stage stage = (Stage) messageLabel.getScene().getWindow();
            stage.setScene(scene);
            stage.setTitle(title);
        } catch (Exception e) {
            messageLabel.setText("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –¥–æ " + title);
        }
    }
}
