package com.example.systemactivitymonitor.service;

import com.example.systemactivitymonitor.model.IdleTime;
import com.example.systemactivitymonitor.model.User;
import com.example.systemactivitymonitor.repository.impl.IdleRepositoryImpl;
import com.example.systemactivitymonitor.repository.interfaces.IdleRepository;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

public class IdleService {

    private final IdleRepository idleRepository = new IdleRepositoryImpl();

    /** üü¢ –ü–æ—á–∞—Ç–∏ –ø–µ—Ä—ñ–æ–¥ –ø—Ä–æ—Å—Ç–æ—é */
    public IdleTime startIdle(User user) {
        validateUser(user);

        if (isIdleActive(user)) {
            throw new IllegalStateException("–°–µ—Å—ñ—è –ø—Ä–æ—Å—Ç–æ—é –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∞. –ó–∞–≤–µ—Ä—à—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—É –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ—é.");
        }

        IdleTime idle = new IdleTime(user, LocalDateTime.now());

        // –î–æ–¥–∞—î–º–æ –¥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user.getIdleTimes().add(idle);

        idleRepository.save(idle);
        System.out.println("‚è∏ –ü–æ—á–∞—Ç–æ –ø—Ä–æ—Å—Ç—ñ–π –æ " + idle.getStartTime());

        return idle;
    }

    /** üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ—Å—Ç—ñ–π */
    public IdleTime endIdle(User user) {
        validateUser(user);

        Optional<IdleTime> activeIdleOpt = getActiveIdle(user);
        if (activeIdleOpt.isEmpty()) {
            throw new IllegalStateException("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—é –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.");
        }

        IdleTime activeIdle = activeIdleOpt.get();
        LocalDateTime endTime = LocalDateTime.now();

        if (endTime.isBefore(activeIdle.getStartTime())) {
            throw new IllegalArgumentException("–ö—ñ–Ω—Ü–µ–≤–∏–π —á–∞—Å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —Ä–∞–Ω—ñ—à–µ –ø–æ—á–∞—Ç–∫—É.");
        }

        long durationSeconds = Duration.between(activeIdle.getStartTime(), endTime).getSeconds();
        if (durationSeconds < 0) durationSeconds = 0;

        activeIdle.setEndTime(endTime);
        activeIdle.setDurationSeconds((int) durationSeconds);

        idleRepository.save(activeIdle);
        System.out.println("‚úÖ –ü—Ä–æ—Å—Ç—ñ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: " + durationSeconds + " —Å–µ–∫.");

        return activeIdle;
    }

    /** üìò –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ‚Äî —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Å—Ç—ñ–π —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ */
    public boolean isIdleActive(User user) {
        return getActiveIdle(user).isPresent();
    }

    /** üìò –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Å—Ç—ñ–π */
    public Optional<IdleTime> getActiveIdle(User user) {
        return user.getIdleTimes().stream()
                .filter(idle -> idle.getEndTime() == null)
                .findFirst();
    }

    /** üìú –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø–µ—Ä—ñ–æ–¥–∏ –ø—Ä–æ—Å—Ç–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ */
    public List<IdleTime> getIdleTimesByUser(User user) {
        validateUser(user);
        return idleRepository.findByUserId(user.getId());
    }

    /** ‚è± –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—Ä–æ—Å—Ç–æ—ó –∑–∞ –ø–µ—Ä—ñ–æ–¥ */
    public List<IdleTime> getIdleTimesInPeriod(User user, LocalDateTime start, LocalDateTime end) {
        validateUser(user);
        validatePeriod(start, end);
        return idleRepository.findByUserIdAndStartTimeBetween(user.getId(), start, end);
    }

    /** ‚è≥ –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –ø—Ä–æ—Å—Ç–æ—é –∑–∞ –ø–µ—Ä—ñ–æ–¥ */
    public long getTotalIdleSeconds(User user, LocalDateTime start, LocalDateTime end) {
        return getIdleTimesInPeriod(user, start, end).stream()
                .filter(i -> i.getDurationSeconds() != null)
                .mapToLong(IdleTime::getDurationSeconds)
                .sum();
    }

    /** üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å –ø—Ä–æ—Å—Ç–æ—é */
    public void deleteIdleById(Integer idleId) {
        if (idleId == null)
            throw new IllegalArgumentException("ID –ø—Ä–æ—Å—Ç–æ—é –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.");
        idleRepository.deleteById(idleId);
        System.out.println("üóë –ü—Ä–æ—Å—Ç—ñ–π –∑ ID=" + idleId + " –≤–∏–¥–∞–ª–µ–Ω–æ.");
    }

    // =======================================================
    // üîπ –ü—Ä–∏–≤–∞—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
    // =======================================================

    private void validateUser(User user) {
        if (user == null || user.getId() == null)
            throw new IllegalArgumentException("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞–¥–∞–Ω–∏–π –∞–±–æ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π (id == null).");
    }

    private void validatePeriod(LocalDateTime start, LocalDateTime end) {
        if (start == null || end == null || end.isBefore(start))
            throw new IllegalArgumentException("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ—é.");
    }
}
